**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: tv.iskon.hr
* @MinSWversion: V2.1.3
* @Revision 0 - [16/09/2017] Blackbear199
*   - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------

site {url=tv.iskon.hr|timezone=Europe/Zagreb|maxdays=7|cultureinfo=en-GB|charset=UTF-8|titlematchfactor=90|nopageoverlaps}
site {episodesystem=onscreen|allowlastdayoverflow}

urldate.format {datestring|yyyy-MM-dd}

url_index.headers {customheader=Accept-Encoding=gzip,deflate}     * to speedup the downloading of the index pages
index_urlchannellogo.modify {substring(type=regex)|'config_site_id' "##(.*)$"}
index_urlchannellogo.modify {addstart|https://tv.iskon.hr/var/ezdemo_site/storage/images/tv-vodic/}
global_temp_1.modify {substring(scope=urlindex type=regex)|'config_site_id' "^(.*?)##"}
url_index.modify {replace(scope=urlindex)|##channel##|'global_temp_1'}
url_index{url|https://tv.iskon.hr/iskon/epg/method::get_entries::channels::##channel##::date::|urldate|::length::24::start::6}


index_showsplit.scrub {multi|{"stat":"ok"|{"id":||}]}
index_showsplit.modify {cleanup(style=jsondecode)}
index_date.scrub {regex||"start":"(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2})Z",||}
index_start.scrub {regex||"start":"\d{4}-\d{2}-\d{2}T(\d{2}:\d{2}:\d{2})Z",||}
index_stop.scrub {regex||"end":"\d{4}-\d{2}-\d{2}T(\d{2}:\d{2}:\d{2})Z",||}
index_title.scrub {regex||"title":"(.*?)",||}

scope.range{(indexshowdetails)|end}
index_description.scrub {regex||"desc":"(.*?)",||}
index_description.modify {remove|\\n}
index_subtitle.modify {substring(type=regex)|'index_description' "^(.+?)\s-\s\([^\)]+\)\s-\s"}
index_description.modify {remove('index_subtitle' not "")|'index_subtitle' - }
index_episode.modify {substring(pattern="S'S1', E'E1'""E'E1'" type=regex)|'index_description' "^\(((?:S\d+, )?E\d+),\s*[^\)]*\)\s-\s"}
index_description.modify {remove('index_episode' not "")|'index_episode', }
index_episode.modify {set(not "")|'index_episode'\|'index_episode'(system=xmltv_ns)}
index_productiondate.modify {substring(type=regex)|'index_description' "^\([^\)]+,\s(\d{4})\)\s-\s"}
index_description.modify {remove('index_productiondate' not "")|, 'index_productiondate'}
index_country.modify {substring(type=regex)|'index_description' "^\([^\)]*,\s([^\)]*)\)\s-\s"}
index_description.modify {remove('index_country' not "")|, 'index_country'}
index_country.modify {cleanup(style=name)}
index_category.modify {substring(type=regex)|'index_description' "^\(([^\)]+)\)\s-\s"}
index_description.modify {remove('index_category' not "")|('index_category') - }
index_category.modify {cleanup(style=name)}
index_director.modify {substring(type=regex)|'index_description' "R\.:(.+?)(?:Ul\.:\|$)"}
index_description.modify {remove('index_director' not "")|R.:'index_director'}
index_director.modify {replace|, |\|}
index_actor.modify {substring(type=regex max=3)|'index_description' "Ul\.:(.+?)$"}
index_actor.modify {replace|, |\|}
index_actor.modify {replace(type=regex)|^[^\(]+(\s\()|(role= }
index_description.modify {remove('index_actor' not "")|Ul.:'index_actor'}
end_scope


**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index {url|https://tv.iskon.hr/iskon/epg/method::get_init}
*index_site_id.scrub {regex||{"id":"(\d+","title":"[^"]*","ott_enabled":"[^"]*","recordable":"[^"]*","timeshift":"[^"]*","image_logo":"[^"]*)",||}
*index_site_channel.scrub {regex||{"id":"\d+","title":"([^"]*)",||}
*index_site_channel.modify {cleanup(style=unidecode)}
*index_site_channel.modify {cleanup(style=jsondecode)}
*index_site_id.modify {cleanup(style=jsondecode)}
*index_site_id.modify {replace(type=regex)|^[^"]*(",.+?var/ezdemo_site/storage/images/tv-vodic/)|##}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
** @auto_xml_channel_end
